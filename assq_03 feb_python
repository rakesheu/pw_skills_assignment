{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "365e8023-9cff-46ad-8f24-b43a74d62b7b",
   "metadata": {},
   "source": [
    "###Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the\n",
    "range of 1 to 25."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "943a21ee-75f5-4772-bfc5-907663794a61",
   "metadata": {},
   "source": [
    "ans-In Python, the keyword used to create a function is \"def\"\n",
    "\n",
    "here is example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "730d0063-f460-429d-a2e4-6c2ae50e058e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_odd_numbers():\n",
    "    odd_numbers=[]\n",
    "    for i in range(1,26):\n",
    "        if i %2==1:\n",
    "            odd_numbers.append(i)\n",
    "    return odd_numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10c53858-87cb-4537-adbb-31a3bc229aee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_odd_numbers()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "797c270d-b41d-45bd-a6eb-0c4bf9889aa5",
   "metadata": {},
   "source": [
    "###Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs\n",
    "to demonstrate their use."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf36cdf2-4dbd-4b8f-a020-0ad2f1598dc3",
   "metadata": {},
   "source": [
    "ans-In Python, *args and **kwargs are used to pass a variable number of arguments to a function.\n",
    "\n",
    "*args is used to pass a variable number of non-keyword arguments to a function. It allows you to pass any number of arguments to a function without needing to specify the exact number of arguments beforehand.\n",
    "\n",
    "for exp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "311a7046-4e4b-4f4f-b9fc-71b4a70a4533",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum_numbers(*args):\n",
    "    result=0\n",
    "    for num in args:\n",
    "        result+=num\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3d866127-1ff9-4874-8fa2-714e6c552b2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_numbers()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27894f2b-722e-4e28-b0fc-02889ea964fa",
   "metadata": {},
   "source": [
    "**kwargs is used to pass a variable number of keyword arguments to a function. It allows you to pass any number of keyword arguments to a function without needing to specify the exact number of arguments or their names beforehand.\n",
    "\n",
    "for exp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "83cdbcc0-02b9-4328-95b1-5fedf22bf474",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name:Rakesh\n",
      "age:30\n",
      "city:berlin\n"
     ]
    }
   ],
   "source": [
    "def print_dict(**kwargs):\n",
    "    for key,value in kwargs.items():\n",
    "        print(key + ':'+ str(value))\n",
    "        sum_numbers(1, 2, 3, 4, 5) # Returns 15\n",
    "print_dict(name='Rakesh', age=30, city='berlin')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e70a99a-f9c5-4e13-96c8-305bd648664c",
   "metadata": {},
   "source": [
    "###Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method\n",
    "used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14,\n",
    "16, 18, 20]."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f52e848-43c1-4c82-a2fa-768044f45c5f",
   "metadata": {},
   "source": [
    "In Python, an iterator is an object that implements the iterator protocol, which consists of two methods: __iter__() and __next__(). An object is said to be iterable if it has an __iter__() method that returns an iterator object. The iterator object can be used to traverse through the elements of the iterable object one by one.\n",
    "\n",
    "The iter() method is used to initialize an iterator object from an iterable object. The next() method is used to iterate through the iterator object to get the next element."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b6e32f95-8cec-455c-b28e-82263ab979c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "5\n",
      "6\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "l=[2,4,5,6,10,12,14,16,18,20]\n",
    "\n",
    "#initialize the iterator object\n",
    "my_iterator = iter(l)\n",
    "\n",
    "#iterate through the first five elements using the next() method\n",
    "for i in range(5):\n",
    "    print(next(my_iterator))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6442a7bb-5d59-4883-9069-bf31cc17f595",
   "metadata": {},
   "source": [
    "###Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator\n",
    "function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7faf529e-b3c9-45ca-ac62-25b8fcd04fac",
   "metadata": {},
   "source": [
    "In Python, a generator function is a special type of function that returns an iterator object. Unlike normal functions that return a value and then terminate, a generator function can pause its execution and resume from where it left off at a later time. This makes it possible to generate a series of values on-the-fly instead of generating all the values upfront and storing them in memory.\n",
    "\n",
    "The yield keyword is used in a generator function to pause its execution and return a value to the caller. When the generator function is called again, it resumes execution from where it left off and continues until the next yield statement is encountered."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c2834c6c-8571-4c23-9c21-79782951ef50",
   "metadata": {},
   "outputs": [],
   "source": [
    "def even_numbers(n):\n",
    "    i=0\n",
    "    while i<n:\n",
    "        yield i*2\n",
    "        i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2eb169ac-2c65-44e7-bac4-4b96a342a70f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "2\n",
      "4\n",
      "6\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "my_iterator = even_numbers(5)\n",
    "for num in my_iterator:\n",
    "    print(num)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea70feae-e90f-4be9-9657-75b265d72e3a",
   "metadata": {},
   "source": [
    "###Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the\n",
    "first 20 prime numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3fbbbace-a9dd-47bc-81d5-1a25acbd80be",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prime_numbers():\n",
    "    yield 2\n",
    "    primes = [2]\n",
    "    num = 3\n",
    "    while num < 1000:\n",
    "        for p in primes:\n",
    "            if num % p ==0:\n",
    "                break\n",
    "        else:\n",
    "            primes.append(num)\n",
    "            yield num\n",
    "        num += 2\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6e39e047-b6fb-4466-98fe-f9d0aa9d67c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "3\n",
      "5\n",
      "7\n",
      "11\n",
      "13\n",
      "17\n",
      "19\n",
      "23\n",
      "29\n",
      "31\n",
      "37\n",
      "41\n",
      "43\n",
      "47\n",
      "53\n",
      "59\n",
      "61\n",
      "67\n",
      "71\n"
     ]
    }
   ],
   "source": [
    "my_iterator = prime_numbers()\n",
    "for i in range(20):\n",
    "    \n",
    "    print(next(my_iterator))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d7e805e-8f20-4222-ad5f-7077339ef433",
   "metadata": {},
   "source": [
    "###Q6. Write a python program to print the first 10 Fibonacci numbers using a while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0939fa76-797e-4c79-8ec2-58d987a7a557",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n"
     ]
    }
   ],
   "source": [
    "a,b= 0,1\n",
    "\n",
    "#print the first 10 fib0nacci numbers using a while loop\n",
    "count = 0\n",
    "while count <10:\n",
    "    print(a)\n",
    "    c=a+b\n",
    "    a=b\n",
    "    b=c\n",
    "    count +=1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ead2d29-a23f-4377-947b-9db8786929cf",
   "metadata": {},
   "source": [
    "###Q7. Write a List Comprehension to iterate through the given string: ‘pwskills’.\n",
    "Expected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "66a3ac6d-6437-4c31-9678-d4f0d3fe8de9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['p', 'w', 's', 'k', 'l', 'l', 's']\n"
     ]
    }
   ],
   "source": [
    "s = 'pwskills'\n",
    "\n",
    "# use a list comprehension to iterate through the string and output only the consonants\n",
    "consonants = [char for char in s if char not in 'aeiou']\n",
    "\n",
    "# print the resulting list\n",
    "print(consonants)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18cfb283-6382-4052-815c-272b8cfdafbc",
   "metadata": {},
   "source": [
    "###Q8. Write a python program to check whether a given number is Palindrome or not using a while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4fc13fd3-d63f-400f-9ab8-1b40fc8ca34f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number:  121\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "121 is a palindrome number\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a number: \"))\n",
    "\n",
    "# initialize variables for the original number and the reversed number\n",
    "original_num = num\n",
    "reverse_num = 0\n",
    "\n",
    "# reverse the number using a while loop\n",
    "while num > 0:\n",
    "    digit = num % 10\n",
    "    reverse_num = (reverse_num * 10) + digit\n",
    "    num = num // 10\n",
    "\n",
    "# check if the original and reversed numbers are the same\n",
    "if original_num == reverse_num:\n",
    "    print(original_num, \"is a palindrome number\")\n",
    "else:\n",
    "    print(original_num, \"is not a palindrome number\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ffd3e770-e513-4c7b-b798-c48f5eddd9be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number:  123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "123 is not a palindrome number\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter a number: \"))\n",
    "\n",
    "# initialize variables for the original number and the reversed number\n",
    "original_num = num\n",
    "reverse_num = 0\n",
    "\n",
    "# reverse the number using a while loop\n",
    "while num > 0:\n",
    "    digit = num % 10\n",
    "    reverse_num = (reverse_num * 10) + digit\n",
    "    num = num // 10\n",
    "\n",
    "# check if the original and reversed numbers are the same\n",
    "if original_num == reverse_num:\n",
    "    print(original_num, \"is a palindrome number\")\n",
    "else:\n",
    "    print(original_num, \"is not a palindrome number\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "633ac01c-cbba-4adf-bf64-623ff0cb4495",
   "metadata": {},
   "source": [
    "Q9. ###Write a code to print odd numbers from 1 to 100 using list comprehension.\n",
    "Note: Use a list comprehension to create a list from 1 to 100 and use another List comprehension to filter\n",
    "out odd numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5d83377f-2f39-4b7d-b153-172bfc573a6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n"
     ]
    }
   ],
   "source": [
    "# create a list of numbers from 1 to 100\n",
    "numbers = [num for num in range(1, 101)]\n",
    "\n",
    "# filter out the even numbers using list comprehension\n",
    "odd_numbers = [num for num in numbers if num % 2 == 1]\n",
    "\n",
    "# print the resulting list of odd numbers\n",
    "print(odd_numbers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c86fd647-b915-405c-a453-6bfb786b7986",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
